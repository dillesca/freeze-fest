name: Reusable Deploy

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
      aws-cluster:
        required: true
        type: string
      aws-service:
        required: true
        type: string
      aws-region:
        required: false
        type: string
        default: us-west-2
    secrets:
      AWS_ROLE_ARN:
        required: true
      ECR_REGISTRY:
        required: true
      ECR_REPOSITORY:
        required: true

permissions:
  contents: read
  id-token: write

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
          aws-region: ${{ inputs.aws-region }}

      - name: Log in to Amazon ECR
        uses: aws-actions/amazon-ecr-login@v2
        with:
          registry: ${{ secrets.ECR_REGISTRY }}

      - name: Build image
        run: |
          docker build -t freeze-fest:${{ github.sha }} .

      - name: Tag and push image
        env:
          ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
          ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        run: |
          IMAGE_URI="$ECR_REGISTRY/$ECR_REPOSITORY:${{ github.sha }}"
          docker tag freeze-fest:${{ github.sha }} "$IMAGE_URI"
          docker push "$IMAGE_URI"
          echo "image-uri=$IMAGE_URI" >> "$GITHUB_OUTPUT"
        id: image

      - name: Render task definition
        id: render
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: deploy/task-def.json
          container-name: freeze-fest
          image: ${{ steps.image.outputs.image-uri }}

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: ${{ steps.render.outputs.task-definition }}
          service: ${{ inputs.aws-service }}
          cluster: ${{ inputs.aws-cluster }}
          wait-for-service-stability: true
